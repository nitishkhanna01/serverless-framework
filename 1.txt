service: lamb-api

plugins:
  - serverless-offline
  - serverless-ssm-publish
  - serverless-cloudformation-sub-variables
  - serverless-delete-loggroups
  - serverless-prune-plugin
  # - serverless-plugin-lambda-dead-letter
  # - serverless-s3-local
  # - serverless-offline-s3
  # - serverless-kms-secrets
  # - serverless-ssm-fetch


provider:
  name: aws
  runtime: nodejs18.x
  runtimeManagement: auto # optional, set how Lambda controls all functions runtime. AWS default is auto; this can either be 'auto' or 'onFunctionUpdate'. For 'manual', see example in hello function below (syntax for both is identical)
  tracing:
    lambda: true # optional, enables tracing for all functions (can be true (true equals 'Active') 'Active' or 'PassThrough')
  timeout: 90 # optional, in seconds, default is 6
  stage: ${self:custom.CURRENT_STAGE}
  logRetentionInDays: 30
  versionFunctions: false
  region: ap-southeast-2
  iamRoleStatements:
    - Effect: Allow
      Action: # Gives permission access parametrs from AWS
        - ssm:GetParameters
        - ssm:GetParameter
        - ssm:PutParameter
        - ssm:CreateParameters
        - ssm:CreateParameter
        - s3:PutObject
        - s3:GetObject
        - s3:HeadObject
        - s3:DeleteObject
        - sqs:DeleteMessage
        - sqs:ReceiveMessage
        - sqs:SendMessage
        - sqs:GetQueueUrl
        - secretsmanager:TagResource
        - secretsmanager:GetSecretValue
      Resource: "*"
  stackPolicy:
    - Effect: Allow
      Principal: "*"
      Action: "Update:*"
      Resource: "*"
    # Prevent CloudFormation from replacing or deleting Cognito user pools
    - Effect: Allow
      Principal: "*"
      Resource: "*"
      Condition:
        StringEquals:
          ResourceType:
            - AWS::Cognito::UserPool
      Action:
        - Update:Replace
        - Update:Delete
  apiKeys:
    - koalaKey




custom:
  prune:
    automatic: true
    number: 3
  CURRENT_STAGE: ${opt:stage}
  # Other serverless stacks
  INFRA_MEDIA_STACK: lamb-api-media-${self:custom.CURRENT_STAGE}

  # Domain and Subdomains configurations
  NP_WEB_DOMAIN: ${opt:stage, self:provider.stage}-ui-web.koalacyrus.com
  PRD_WEB_DOMAIN: ${opt:stage, self:provider.stage}-ui-web.koalacyrus.com # TODO CHANGE THIS DURING THE PRODUCTION TIME
  WEB_DOMAIN:
    dev: ${self:custom.NP_WEB_DOMAIN}
    tst: ${self:custom.NP_WEB_DOMAIN}
    stg: ${self:custom.NP_WEB_DOMAIN}
    prd: ${self:custom.PRD_WEB_DOMAIN}
  
  # Domain and Subdomains configurations
  NP_CMS_DOMAIN: ${opt:stage, self:provider.stage}-ui-cms.koalacyrus.com
  PRD_CMS_DOMAIN: ${opt:stage, self:provider.stage}-ui-cms.koalacyrus.com # TODO CHANGE THIS DURING THE PRODUCTION TIME
  CMS_DOMAIN:
    dev: ${self:custom.NP_CMS_DOMAIN}
    tst: ${self:custom.NP_CMS_DOMAIN}
    stg: ${self:custom.NP_CMS_DOMAIN}
    prd: ${self:custom.PRD_CMS_DOMAIN}

  # Cognito based configurations
  COGNITO_USER_POOL_DOMAIN: ${opt:stage, self:provider.stage}-koalalivingpool
  COGNITO_BASED_AUTH_DOMAIN: ${self:custom.COGNITO_USER_POOL_DOMAIN}.auth.ap-southeast-2.amazoncognito.com
  COGNITO_CUSTOM_AUTH_DOMAIN: https://auth.${self:custom.WEB_DOMAIN.${self:custom.CURRENT_STAGE}}
  COGNITO_AUTH_REDIRECT_URL: https://${self:custom.WEB_DOMAIN.${self:custom.CURRENT_STAGE}}
  ORDERS_BASEURL: {{orderServiceURL}}
  SHIPPING_BASEURL: {{shippingServiceURL}}
  PRODUCTS_BASEURL: {{productServiceURL}}
  # ERP Services (TODO LATER ON WE NEED TO CREATE A SOLUTION FOR BELOW)
  ORDER_SERVICE_KEY: {{ orderServiceKey }}
  SHIPPING_SERVICE_KEY: {{shippingServiceKey}}
  PRODUCT_SERVICE_KEY: {{productServiceKey}}

  # 3rd party services setup
  NP_SHIPPIT_ENDPOINT: https://staging.shippit.com/api/3/
  PRD_SHIPPIT_ENDPOINT: https://www.shippit.com/api/3/

  SHIPPIT_KEY: ${env:SHIPPIT_KEY}
  STRIPE_PRIVATE_KEY: ${env:STRIPE_PRIVATE_KEY}
  SENDGRID_API_KEY: ${env:SENDGRID_API_KEY}

  NP_STRIPE_PUBLIC_KEY: pk_test_51HnvNQJ0GoLSCNbjBkAwDeV4DenIA0zf1a2ZfY92NFlLkf8Siu2gJrvk13qfUxpxTd6wvTru01zrrBUwnSdNGSFL00eyszdBcb
  PRD_STRIPE_PUBLIC_KEY: pk_live_51HnvNQJ0GoLSCNbjtZFGleI0SO7vLZloTcxaAHHDcN0aRtGbZEIPAshlNV2I7bEQnVr4X8pmMuxmWuSF6gWOTiHU00SnwSk2L1

  SHIPPIT_ENDPOINT:
    dev: ${self:custom.NP_SHIPPIT_ENDPOINT}
    tst: ${self:custom.NP_SHIPPIT_ENDPOINT}
    stg: ${self:custom.NP_SHIPPIT_ENDPOINT}
    prd: ${self:custom.PRD_SHIPPIT_ENDPOINT}
  STRIPE_PUBLIC_KEY:
    dev: ${self:custom.NP_STRIPE_PUBLIC_KEY}
    tst: ${self:custom.NP_STRIPE_PUBLIC_KEY}
    stg: ${self:custom.NP_STRIPE_PUBLIC_KEY}
    prd: ${self:custom.PRD_STRIPE_PUBLIC_KEY}

  # Resource names
  USER_POOL_NAME: ${self:custom.CURRENT_STAGE}-user-pool
  USER_POOL_CLIENT_NAME: ${self:custom.CURRENT_STAGE}-user-pool-client
  ADMIN_POOL_NAME: ${self:custom.CURRENT_STAGE}-admin-pool
  ADMIN_POOL_CLIENT_NAME: ${self:custom.CURRENT_STAGE}-user-admin-client
  IDENTITY_POOL_NAME: ${self:custom.CURRENT_STAGE}-identity-pool
  COGNITO_AUTHORIZER: ${self:custom.CURRENT_STAGE}-cognito-authorizer
  COGNITO_AUTH_ROLE: ${self:custom.CURRENT_STAGE}-cognito-auth_role
  COGNITO_UNAUTH_ROLE: ${self:custom.CURRENT_STAGE}-cognito-unauth_role
  ORDER_DISPATCH_NAME: ${self:custom.CURRENT_STAGE}-order-dispatch
  # S3 bucket configurations
  MEDIA_BUCKET_NAME: ${cf:${self:custom.INFRA_MEDIA_STACK}.MediaBucket}
  BANNER_MEDIA_BUCKET_NAME: ${cf:${self:custom.INFRA_MEDIA_STACK}.BannerMediaBucket}
  # Database configurations
  DB_NAME: ${self:custom.CURRENT_STAGE}WebDatabase
  DB_CLASS:
    dev: db.t3.small
    tst: db.t3.small
    stg: db.t3.small
    prd: db.t2.small
    # Please note that once you apply a manual db instance, above DB_CLASS fields will not be valid
  WEB_BUCKET_NAME:
    tst: uwor9ei-f10fd8j
    stg: ygk4wxu-gfjctvr
    prd: siy49u-gc8t6fi
  DB_IS_BACKUP_ENABLED:
    dev: false
    tst: false
    stg: false
    prd: true
  RDS_SECRET_NAME: /${self:provider.stage}/web-lamb-api/rds-password
  AURORA:
    HOST:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Address]
    PORT:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]
    VPC_CIDR: 10
  corsConfig: true
  # Serverless parameter store configurations
  ssmPublish:
    enabled: true
    params:
      - path: /${self:provider.stage}/web-lamb-api/service-endpoint
        source: ServiceEndpoint
        secure: false
      # - path: /${self:provider.stage}/web-lamb-api/api-key
      #   description: API Key
      #   value: 'Please update the key manually'
      #   secure: false
      - path: /${self:provider.stage}/web-lamb-api/web-domain
        description: WEB Domain
        value: ${self:custom.WEB_DOMAIN.${self:custom.CURRENT_STAGE}}
        secure: false
      - path: /${self:provider.stage}/web-lamb-api/web-app-bucket
        description: WEB Application S3 bucket
        value: ${self:custom.WEB_BUCKET_NAME.${self:custom.CURRENT_STAGE}}
        secure: false
      - path: /${self:provider.stage}/web-lamb-api/cms-domain
        description: CMS Domain
        value: ${self:custom.CMS_DOMAIN.${self:custom.CURRENT_STAGE}}
        secure: false
      # COGNITO
      - path: /${self:provider.stage}/web-lamb-api/cognito-user-pool
        source: UserPoolId
        secure: false
      - path: /${self:provider.stage}/web-lamb-api/cognito-user-pool-client
        source: UserPoolClientId
        secure: false
      - path: /${self:provider.stage}/web-lamb-api/cognito-admin-pool
        source: AdminPoolId
        secure: false
      - path: /${self:provider.stage}/web-lamb-api/cognito-admin-pool-client
        source: AdminPoolClientId
        secure: false
      # ENDOF COGNITO
      # ERP SERVICES
      - path: /${self:provider.stage}/web-lamb-api/ms-products/apiKey
        description: API Key for product service
        value: ${self:custom.PRODUCT_SERVICE_KEY}
        secure: true
      - path: /${self:provider.stage}/web-lamb-api/ms-products/baseUrl
        description: Base URL for product service
        value: ${self:custom.PRODUCTS_BASEURL}
        secure: false
      - path: /${self:provider.stage}/web-lamb-api/ms-orders/apiKey
        description: API Key for order service
        value: ${self:custom.ORDER_SERVICE_KEY}
        secure: true
      - path: /${self:provider.stage}/web-lamb-api/ms-orders/baseUrl
        description: Base URL for order service
        value: ${self:custom.ORDERS_BASEURL}
        secure: false
      - path: /${self:provider.stage}/web-lamb-api/ms-shipping/apiKey
        description: API Key for order service
        value: ${self:custom.SHIPPING_SERVICE_KEY}
        secure: true
      - path: /${self:provider.stage}/web-lamb-api/ms-shipping/baseUrl
        description: Base URL for shipping service
        value: ${self:custom.SHIPPING_BASEURL}
        secure: false
      # ENDOF ERP SERVICES
      # SENDGRID
      - path: /${self:provider.stage}/web-lamb-api/sendgrid-apikey
        description: Sendgrid API key
        value: ${self:custom.SENDGRID_API_KEY }
        secure: false
      # ENDOF SENDGRID
      # ORDER DISPATCHER
      - path: /${self:provider.stage}/web-lamb-api/order-sqs-name
        description: Order SQS name
        value: ${self:custom.ORDER_DISPATCH_NAME}
        secure: false
      - path: /${self:provider.stage}/web-lamb-api/order-sqs-url
        description: Order SQS URL
        source: OrderDispatchQueue
        secure: false
      # ENDOF ORDER DISPATCHER
      # STRIPE
      - path: /${self:provider.stage}/web-lamb-api/stripe-apikey
        description: Stripe API Key
        value: ${self:custom.STRIPE_PRIVATE_KEY }
        secure: false
      - path: /${self:provider.stage}/web-lamb-api/stripe-public-apikey
        description: Stripe Puclic API Key
        value: ${self:custom.STRIPE_PUBLIC_KEY.${self:custom.CURRENT_STAGE}}
        secure: false
      # ENDOF STRIPE
      # SHIPPIT
      - path: /${self:provider.stage}/web-lamb-api/shipping-apikey
        description: Shipping service API key
        value: ${self:custom.SHIPPIT_KEY}
        secure: false
      - path: /${self:provider.stage}/web-lamb-api/shipping-url
        description: Shipping service url
        value: ${self:custom.SHIPPIT_ENDPOINT.${self:custom.CURRENT_STAGE}}
        secure: false
      # ENDOF SHIPPIT

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito User Pool
  - ${file(resources/cognito-user-pool.yml)}
  # Cognito Admin Pool
  - ${file(resources/cognito-admin-pool.yml)}
  # Cognito Identity Pool
  - ${file(resources/cognito-identity-pool.yml)}
  # Cognito Aurora RDS
  - ${file(resources/lambda-role.yml)}
  - ${file(resources/serverless-internet-gateway.yml)}
  - ${file(resources/serverless-vpc.yml)}
  - ${file(resources/serverless-vpcga.yml)}
  - ${file(resources/serverless-subnet-a.yml)}
  - ${file(resources/serverless-subnet-b.yml)}
  - ${file(resources/serverless-subnet-c.yml)}
  - ${file(resources/serverless-subnet-group.yml)}
  - ${file(resources/serverless-security-group.yml)}
  - ${file(resources/route-table-public.yml)}
  - ${file(resources/route-public.yml)}
  - ${file(resources/route-table-association-subnet-a.yml)}
  - ${file(resources/route-table-association-subnet-b.yml)}
  - ${file(resources/route-table-association-subnet-c.yml)}
  - ${file(resources/aurora-rds-cluster-parameter.yml)}
  - ${file(resources/aurora-rds-instance-parameter.yml)}
  - ${file(resources/aurora-rds-cluster.yml)}
  - ${file(resources/aurora-rds-instance.yml)}
  - ${file(resources/rds-secret.yml)}
  - ${file(resources/rds-secret-attachment.yml)}
  # Order dispatch
  - ${file(resources/order-dispatch-queue.yml)}

functions:
  # =================================================================
  # Cognito triggers
  # =================================================================
  preTokenGeneration:
    handler: src/cognito/preTokenGeneration.handler
    name: ${opt:stage, self:provider.stage}-pre-token-generation
    environment:
      DEPLOY_ENV: ${self:provider.stage}
    events:
      - cognitoUserPool:
          pool: KoalaPool
          trigger: PreTokenGeneration
  customMessage:
    handler: src/cognito/customMessage.handler
    name: ${opt:stage, self:provider.stage}-custom-message
    environment:
      COGNITO_BASED_AUTH_DOMAIN: ${self:custom.COGNITO_BASED_AUTH_DOMAIN}
      COGNITO_CUSTOM_AUTH_DOMAIN: ${self:custom.COGNITO_CUSTOM_AUTH_DOMAIN}
      AUTH_REDIRECT_URL: ${self:custom.COGNITO_AUTH_REDIRECT_URL}
      DEPLOY_ENV: ${self:provider.stage}
    events:
      - cognitoUserPool:
          pool: KoalaPool
          trigger: CustomMessage
  postConfirmation:
    handler: src/cognito/postConfirmation.handler
    name: ${opt:stage, self:provider.stage}-postconfirmation-trigger
    environment:
      DEPLOY_ENV: ${self:provider.stage}
    events:
      - cognitoUserPool:
          pool: KoalaPool
          trigger: PostConfirmation
  # =================================================================
  # Data fetcher from ERP
  # =================================================================
  fetcher:
    handler: src/fetcher/index.handler
    environment:
      DEPLOY_ENV: ${self:provider.stage}
    timeout: 900
    events:
      - schedule: rate(1 hour)
  # =================================================================
  # Sitemap generator for WEB
  # =================================================================
  # sitemapGeneratorManually:
  #   handler: src/sitemap/index.handler
  #   name: ${opt:stage, self:provider.stage}-manual-sitemap-generator
  #   environment:
  #     DEPLOY_ENV: ${self:provider.stage}
  #     BUCKET_NAME: ${self:custom.WEB_BUCKET_NAME.${self:custom.CURRENT_STAGE}}
  #     WEB_DOMAIN: ${self:custom.WEB_DOMAIN.${self:custom.CURRENT_STAGE}}
  #   events:
  #     - http:
  #         path: /generate-sitemap
  #         method: get
  #         cors:
  #           origin: "*"
  #           headers:
  #             - Content-Type
  #             - X-Amz-Date
  #             - Authorization
  #             - X-Api-Key
  #             - X-Amz-Security-Token
  #             - X-Amz-User-Agent
  #             - Access-Control-Allow-Headers
  #             - Access-Control-Allow-Origin
  #           allowCredentials: false
  sitemapGenerator:
    handler: src/sitemap/index.handler
    name: ${opt:stage, self:provider.stage}-sitemap-generator
    environment:
      DEPLOY_ENV: ${self:provider.stage}
      BUCKET_NAME: ${self:custom.WEB_BUCKET_NAME.${self:custom.CURRENT_STAGE}}
      WEB_DOMAIN: ${self:custom.WEB_DOMAIN.${self:custom.CURRENT_STAGE}}
    timeout: 900
    events:
      - schedule: rate(2 hours)
      # - httpApi:
      #    path: /generate-sitemap
      #    method: get
      #    cors:
      #    headers:
      #     Content-Type: "'application/xml'"


  # =================================================================
  # Google Feeds Starts
  # =================================================================
  googlefeedGenerator:
    handler: src/googlefeed/index.handler
    name: ${opt:stage, self:provider.stage}-googlefeed-generator
    environment:
      DEPLOY_ENV: ${self:provider.stage}
      BUCKET_NAME: ${self:custom.WEB_BUCKET_NAME.${self:custom.CURRENT_STAGE}}
      WEB_DOMAIN: ${self:custom.WEB_DOMAIN.${self:custom.CURRENT_STAGE}}
    timeout: 900
    events:
      - schedule: rate(1 hour)
      # - httpApi:
      #    path: /generate-sitemap
      #    method: get
      #    cors:
      #    headers:
      #     Content-Type: "'application/xml'"

  # =================================================================
  # Google Feeds Ends
  # =================================================================
  
  # =================================================================
  # Facebook Catalog Starts
  # =================================================================
  facebookcatalogGenerator:
    handler: src/facebookcatalog/index.handler
    name: ${opt:stage, self:provider.stage}-facebookcatalog-generator
    environment:
      DEPLOY_ENV: ${self:provider.stage}
      BUCKET_NAME: ${self:custom.WEB_BUCKET_NAME.${self:custom.CURRENT_STAGE}}
      WEB_DOMAIN: ${self:custom.WEB_DOMAIN.${self:custom.CURRENT_STAGE}}
    timeout: 900
    events:
      - schedule: rate(6 hours)
      # - httpApi:
      #    path: /generate-sitemap
      #    method: get
      #    cors:
      #    headers:
      #     Content-Type: "'application/xml'"

    # =================================================================
  # Facebook Catalog Ends
  # =================================================================

 

  # =================================================================
  # Order SQS for ERP
  # =================================================================
  order:
    handler: src/order/orderWorker.handler
    environment:
      DEPLOY_ENV: ${self:provider.stage}
      NP_WEB_DOMAIN: ${self:custom.NP_WEB_DOMAIN}
      PRD_WEB_DOMAIN: ${self:custom.PRD_WEB_DOMAIN}
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - OrderDispatch
              - Arn

  # =================================================================
  # GraphQL endpoint
  # =================================================================
  graphql:
    handler: src/graphql/index.handler
    name: ${opt:stage, self:provider.stage}-graphql
    timeout: 60
    environment:
      DEPLOY_ENV: ${self:provider.stage}
    events:
      - http:
          path: graphql
          method: post
          private: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - identity
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: false
      - http:
          path: graphql
          method: get
          private: true
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - identity
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: false