###### npm install serverless@2

service: myserverlessproject
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs18.x
  profile: nitish-serverless
  # tracing:
  #   lambda: true
  # timeout: 90
  # logRetentionInDays: 30
  # versionFunctions: false
  region: us-east-1
  # environment:
  #   bucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        # - dynamodb:*
        # - s3:*
        - ses:*
      Resource: "*"
  # apiKeys:
  #   - free:
  #       - myFreeApiKey
  #   - paid:
  #       - myPaidApiKey
  # usagePlan:
  #   - free:
  #       quota:
  #         limit: 100
  #         period: MONTH
  #       throttle:
  #         rateLimit: 5
  #         burstLimit: 10
  #   - paid:
  #       quota:
  #         limit: 1000
  #         period: MONTH
  #       throttle:
  #         rateLimit: 50
  #         burstLimit: 100

configValidationMode: error

############# OptimiseD Lambda Function #########################
# functions:
#   getUser:
#     handler: ./lambdas/getUser.handler
#     events:
#       - http:
#           path: get-user/{ID}
#           method: GET
#           cors: true

## npm install --save serverless-webpack webpack

# plugins:
#   - serverless-webpack

# package:
#   individually: true

################# S3 Bucket ##################
# resources:
#   Resources:
#     DemoBucketUpload:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: myfirsts3serverlessbucket

# custom:
#   s3Sync:
#     - bucketName: myfirsts3serverlessbucket
#       localDir: ./Uploaddata

##### npm install --save serverless-s3-sync
# plugins:
#   - serverless-s3-sync
###################### Dynamo DB ###############################
# custom:
#   tableName: player_points
# resources:
#   Resources:
#     MyDynamoDbTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: ${self:custom.tableName}
#         AttributeDefinitions:
#           - AttributeName: ID
#             AttributeType: S
#         KeySchema:
#           - AttributeName: ID
#             KeyType: HASH
#         BillingMode: PAY_PER_REQUEST
# ########### read DB API ###############
# functions:
#   getPlayerScore:
#     handler: lambdas/endpoints/getPlayerScore.handler
#     events:
#       - http:
#           path: get-player-score/{ID}
#           method: GET
#           cors: true

#  #################### write to database api ##############
# writePlayerScore:
#   handler: lambdas/endpoints/createPlayerScore.handler
#   events:
#     - http:
#         path: create-player-score/{ID}
#         method: POST
#         cors: true

# plugins:
#   - serverless-webpack

# package:
#   individually: true

############## Api - S3 - DATA ############

resources:
  Resources:
      # myAssumeRole:
      #   Type: AWS::IAM::Role
      #   Properties:
      #     RoleName: myAssumeRole
      #     AssumeRolePolicyDocument:
      #       Version: '2012-10-17'
      #       Statement:
      #         - Effect : Allow
      #           Principal: 
      #             Services:
      #               - lambda.amazonaws.com
      #               - apigateway.amazonaws.com
      #           Action:
      #             - sts:AssumeRole
#     DemoBucketUpload:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: ${self:custom.bucketName}

# custom:
#   bucketName: myserverlesstestbucket

functions:
  # writeFile:
  #   handler: lambdas/endpoints/createFile.handler
  #   events:
  #     - http:
  #         path: create-file/{fileName}
  #         method: POST
  #         cors: true
  #         private: true
  # getFile:
  #   handler: lambdas/endpoints/getFile.handler
  #   events:
  #     - http:
  #         path: get-file/{fileName}
  #         method: GET
  #         cors: true
  #         private: true


## HIT api through PRoxy #################
  # proxy:
  #   handler: lambdas/endpoints/proxy.handler
  #   events:
  #     - http:
  #         path: ip/{proxy+}
  #         method: ANY
  #         integration: http-proxy
  #         request:
  #             # uri: https://api.chucknorris.io/jokes/random?category={proxy}
  #             uri: https://extreme-ip-lookup.com/json/?key={proxy}
  #             parameters:
  #               paths:
  #                 proxy: true


############  SEND EMAILS #############################

  # sendEmail:
  #   handler: lambdas/endpoints/sendEmail.handler
  #   events:
  #     - http:
  #         path: send-email
  #         method: POST
  #         cors: true


################  ###############################







plugins:
  - serverless-webpack

package:
  individually: true
